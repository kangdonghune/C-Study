// 0416.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"


int main()
{
	//재활용성을 고려하지 않고 임시로 생성하여 사용하는 함수.
	//람다식-무명함수. 이름이 읍는 함수
	//장점-코드라인에서 함수를 정의하기 때문에 가독성이 좋다.
	//단점-처음보면 이해가 어려움.
	//[캡쳐자리-외부에서 변수를 가져다 쓸 수 있는 자리, 또는 람다 소개식](인자부분) { 코드부} 대괄호가 먼저 나오면 컴파일러가 람다식으로 이해한다.
	[]() {cout << "오늘은 날이 좋네" << endl;}();

	//[] -외부에 있는 변수를 캡쳐할 수 있따.
	//외부의 범위란 람다식을 포함하고 있는 함수 안


	int iA = 0, iB = 0;
	
	[&iA, &iB]() {iA = 30; iB = 20; }(); 
	[iA, iB]() {cout << iA << ","<< iB<< endl; }(); //단순 값복사의 개념이기 때문에 내부에서 외부변수의 변화를 줄 수 없다. 그러니 레퍼런스로 받자.
	[=]() {cout << iA << "," << iB << endl;}(); //외부에 있는 모든 변수를 값복사 형식으로 캡쳐하겠다라는 의미
	[&]() {cout << iA << "," << iB << endl; }(); //&만 붙여주면 내부 변수 이름과 같은 이름의 외부 변수의 레퍼런스를 참조하여 쓴다/
	//람다식은 대게 함수의 인자로 함수를 요구할 때 쓰인다.
	//() 매개변수 부가 없으면 함수 측에서 람다식으로 인자를 넘겨줄 떄 받을 방법이 없어진다.
	//반환은 그냥 맨 첫줄, =[](){}(); 식으로 받아주면 된다.
	//협업을 하는 과정에서 기능이 같은 중복함수로 인한 코드 비대화를 방지하기 위해 해당 라인에서 코드를 정의.
	[]()->int {}(); //와 같이 반환티입 명시가능. 근데 명시할 필요가 있는지는 의문
	
	return 0;
}

