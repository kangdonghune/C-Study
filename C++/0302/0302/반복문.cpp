#include <iostream>
#include <time.h>
using namespace std;


void main()
{
	//반복문의 종류는 while, do~while, for
	//반복문은 중첩하여 사용할 수 있다.
	//반복문을 쓸 때는 항상 탈출조건을 설정해줘야 한다.
	//while 문 같은 경우는 무한루프의 형태로 사용하는 경우가 많다.
	//보통 언제 끝낼 지 모르는 경우에 쓰인다. 정해진 횟수가 없는 경우.
	//다중 반복문을 할 때는 시행 횟수를 신경쓰자. 
	//겹칠 수록 반복 횟수가 기하급수적으로 늘어난다.
	//다중 반복문 가장 안 쪽에서 한 번에 바로 밖으로 나가는 게 쉽지 않다. 이럴 떄 go to를 쓰면 좋다.
	//조건을 잡아줄 때는 (i <= 10) 보단 (10 >= i) 같은 식으로 하는 게 좋다. 이유는 > 같은 것을 빼먹었을 시 대입이 되지 않고 컴파일러 오류로 잡혀서 파악할 수 있게 된다.

	//난수 = 랜덤값
	//난수 구하는 방법
	srand(unsigned(time(NULL)));
	int iRand = rand();//rand()를 마칠 때 int 형식 값을 반환한다.
	cout << iRand << endl;//다만 이 난수는 프로그램이 빌드될 때 값이 고정된다는 문제가 있다.
	//rand()는 씨드표를 참조해서 값을 가져온다. 다만 씨드표는 바뀌지 않는다는 문제
	//srand() rand가 참조하는 씨드표의 위치를 바꿔줄 수 있다.
	//rand() 추가적으로 호출 될 때마다 다음 시드표의 값을 가져온다. 그래도 결국 반복하면 같은 값이 와버린다.
	//이를 극복하려면 srand()의 값에 계속 바뀌는 값을 넣어주는 것이다. 그를 위해서 시간을 넣어준다,.

	//요약: rand가 참조하는 시드표는 고정. 따라서 반복하면 계속 같은 값이 나옴. ->srand로 참조하는 위치를 변경->계속 참조위치를 바꿔주기 위해 시간을 변수로 넣어줌.
	//well512 알고리즘을 쓰는 게 보다 난수 생성에 좋다.

	int i = 0;
	int iTotal = 0;
	while (10 >= i/*조건*/)
	{
		iTotal += i++;
		continue;// continue는 밑의 코드를 이어가지 않고 반복문의 조건식을 다시 확인하러 간다.
		iTotal--; 
	}//조건이 참이면 while문 안의 내용을 반복적으로 시행하라.
	cout << iTotal << endl;

	do 
	{
		cout << "안녕" << endl;
	} while (false); //do while 은 무조건 한 번은 시행하고 그 후 while()의 조건에 따라 추가 시행여부를 결정한다.

	for (int i = 0; i < 10; i++)
	{
		cout << i << endl;
	}// i가 조건 100 미만을 만족할 때 증감을 하면서 해당 문의 코드를 시행한다
   	 // for 문 for (초기화식; 조건식; 증감식)
	 // 실행 순서는 초기화식 -> 조건식 -> 코드 블럭 -> 증감식 -> 조건식 반복
	 // 외부에서 변수를 설정해준다면 초기화식 생략 가능 단 ; 콜론은 유지해야함.
	 // int i = 0; for( ; i < 10; i++) {} 이런 식으로
	 // 조건식 역시 생략 가능 대신 무한루프를 돌게 되니 코드 블럭에서 탈출조건을 설정해줘야 한다. 마찬가지로 세미콜론은 남기기
	 // for( ;; i++){}
	 // 증감식도 생략 가능하지만 그럴거면 걍 while문을 쓰자.
	 
 
}