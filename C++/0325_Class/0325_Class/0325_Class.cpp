// 0325_Class.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"


// 구조체와 클래스의 차이는 기본 접근제어지시자가 무엇으로 되어있느냐의 차이
// private(내부(클래스 안)를 제외한 외부(클래스 안을 제외한 모두)에서의 멤버 접근을 막는다.) protected(본인과 상속 클래스를 제외한 외부에서의 멤버 접근을 막는다.) public (외부에서도 멤버 접근을 허용한다.) 
// 클래스의 디폴트 접근 제어 지시자는 private로 되어 있다.
// 구조체는 디폴트 접근 제어 지시자가 public으로 되어 있다.

/*클래스를 꾸릴 때 지켜야 하는 4가지 속성. 은닉화 캡슐화 상속성 다형성
은닉화-기본 접근 제어지시자를 private로 만들어 외부에서 원치 않는 데이터 변경을 막는 것. 기본적으로 데이터 보호를 목적.
클래스가 가진 내부 멤버 함수로 멤버 변수 제어.

캡슐화-데이터를 외부로부터 숨김으로써 데이터를 보호하겠다. 안에서 제공되는 것이 중요하지 않고 그 데이터를 기능만 제공한다. 은닉화와 겹치는 부분이 있다. 

상속성-공통된 데이터를 혹은 기능을 필요로 하는 클래스에게 물려줄 수 있는 문법. 부모로 갈 수록 추상화+일반화, 자식으로 갈 수록 세분화. 재사용성을 위해 사용.
다 똑같다면 모든 클래스에서 새로 만들 게 아니라 부모로부터 물려 받아서 쓰면 된다.

다형성-상속을 전제로 진행이 된다. 하나의 이름으로 각기 다른 기능을 하겠다.
*/
class CClassName //C로 클래스라는 명시를 해주자. 헝가리안 표기법
{
	//클래스를 추상화 된 틀이라고 말하기도 한다. 일종의 설계도
	//하나의 도면으로 여러 개의 자동차를 만들 수 있듯이 클래스도 동일하다.
	//c++넘어오며 클래스나 구조체나 비슷비슷함.
	//왜 구조체를 안 쓰고 클래스를 쓸까.
	//용도를 분리해서 쓰기 시작. 구조체는 단순 데이터의 집합. 클래스는 객체로 표현을 하자고 규정함.
	int m_iHandle; //멤버 변수
	int m_iSpeed;

	void Drive()
	{
		//멤버 함수
		std::cout << "부릉부릉!" << " 시속: " << m_iSpeed << "KM/h"<<std::endl;
	}
	//전부 기본 접근 제어 지시자인 private라서 main에서 사용할 수 없는 상태다.
};

class CIPhone
{
private:
	char m_szOS[32]; //OS 자체는 외부에서 마음대로 수정할 수 없도록 private 설정.

public: //접근 제어 지시자는 다음 접근 지시제어자를 만날 때까지 범위가 유효하다. 멤버 함수의 경우 내부에서 쓰는 경우가 아니면 대부분 public으로 만든다. 다만 외부에서 쓸일이 아예 없으면 private로 지정하기도 한다.
	void ShowOS()
	{
	std::cout << "이 폰의 OS는 " << m_szOS << std::endl;
	}
	const char* Get_OS() { return m_szOS; } //get 함수는 가져다 쓰기만 하겠다는 거지 추가로 수정하면 안 되고 그럴 이유도 없기에 const를 붙여서 변경 제한을 거는 것.
	void Set_OS(const char* OSName) { strcpy_s(m_szOS, OSName); }
	//이런 식으로 쓸 경우 메인이나 다른 클래스에서 세팅해주고자 하는 값이 const 상수 변수가 아닐 수도 있다.
	//그 경우는 세팅하고자 하는 변수 값을 const 변수 = 세팅 변수 식으로 넣어주면 세팅용 상수 변수를 만들어 줄 수 있다. 선언부 ctrl+. 하면 정의부 자동 생성.
};

int main()
{
	//구조체와 모두 동일하고 딱 하나 다른 점이 있을 뿐
    //클래스 정의한 것을 바탕으로 객체라는 것을 선언
	//클래스와 구조체 모두 멤버 변수가 없어도 최소 크기는 1바이트이다.(주소값을 할당하기 위한 최소 크기)
	//크기는 멤버 변수의 크기와 개수로 결정될 뿐, 함수의 영향을 받지는 않는다.
	CIPhone tMyPhone;
	//strcpy_s(tMyPhone.m_szOS, "안드로이드"); 만약 멤버 변수를 public으로 만들면 다음 과 같이 외부에서 그 멤버 변수를 변경할 수 있다는 문제가 있다.
	//멤버 데이터를 가져오거나 넣어야 할 경우가 있다면 Get,Set 함수를 쓰자.
	tMyPhone.Set_OS("IOS"); //굳이 이런 식으로 하는 이유는 명시적으로 수정하겠다는 의도를 가지는 것으로 실수 방지, +get,set함수에서 오류 사항에 대한 확인도 가능하다.
	tMyPhone.ShowOS();
	CIPhone tMyPhone2;
	tMyPhone2.Set_OS(tMyPhone.Get_OS());//이런 식으로 이미 생성된 클래스의 멤버변수를 가져다 쓸 수 있다.
	tMyPhone2.Set_OS("블랙베리"); //별도 문자열 배열 생성 없이 "문자열"로 넣을 경우 데이터 영역에 자동으로 const char [길이] 타입으로 생성되기에 다음과 같이 쓸 수도 있다.
	tMyPhone2.ShowOS();
	return 0;


	//파일 분할 하여 헤더와 클래스로 선언정의를 나눠눌 때는 정의부에서 함수를 그대로 정의하면 전역 함수로 인식된다. 따라서 :: 범위지정연산자로 어떤 클래스의 함수인지 지정해줘야 정의가 옳바르게 인지된다.
}